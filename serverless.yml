# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: abstractplay

plugins:
  - serverless-dotnet
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore2.0
  memorySize: 256
  timeout: 30
  versionFunctions: false
  environment:
    db_server: ${file(../apsecrets.yml):db_server}
    db_database: ${file(../apsecrets.yml):db_database}
    db_username: ${file(../apsecrets.yml):db_username}
    db_password: ${file(../apsecrets.yml):db_password}
  vpc:
    securityGroupIds:
      - ${file(../apsecrets.yml):secGroup}
    subnetIds:
      - ${file(../apsecrets.yml):subnet1}
      - ${file(../apsecrets.yml):subnet2}
      - ${file(../apsecrets.yml):subnet3}

# you can overwrite defaults here
  stage: prod
  region: us-east-2

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  artifact: bin/release/netcoreapp2.0/deploy-package.zip
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  RootGet:
    handler: CsharpHandlers::abstractplay.Functions::RootGet
    events:
      - http:
          path: /
          method: get
          documentation:
            summary: "Get basic info and entry points"
            description: "This is where you'll find basic API information, including announcements, and entry points to the various resources"

  UsersPost:
    handler: CsharpHandlers::abstractplay.Functions::UsersPost
    events:
      - http:
          path: /users
          method: post
          reqValidatorName: 'xRequestValidateBody'
          authorizer:
            arn: arn:aws:cognito-idp:us-east-2:153672715141:userpool/us-east-2_mK1gdusQy
          documentation:
            summary: "Create new profile"
            description: "This is how you create a new profile"
            requestModels:
              "application/json": "RequestUsersPost"

  UserGet:
    handler: CsharpHandlers::abstractplay.Functions::UserGet
    events:
      - http:
          path: /users/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          documentation:
            summary: "Get user profile"
            description: "Get specific user profile and related resources"


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    xRequestValidateBody:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'reqvalidator-body'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

custom:
  documentation:
    info:
      version: "1"
      title: "Abstract Play API"
      description: "The primary Abstract Play API"
      termsOfService: "https://www.abstractplay.com/terms.html"
    models:
      -
        name: "RequestUsersPost"
        description: "Required body content when POSTing to /users"
        contentType: "application/json"
        schema: ${file(models/request_users_post.json)}


