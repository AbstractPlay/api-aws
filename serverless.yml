service: abstractplay

plugins:
  - serverless-dotnet
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-plugin-scripts

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore2.0
  memorySize: 256
  timeout: 30
  versionFunctions: false
  environment:
    sns_mutator: ${self:custom.snsMutatorArn}
    sns_pinger: ${self:custom.snsPingerArn}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: ${self:custom.snsMutatorArn}

  stage: dev
  region: us-east-2

functions:
  GraphQLPublic:
    handler: abstractplay::abstractplay.DBFunctions::GraphQL
    environment:
      db_server: ${file(../apsecrets.yml):db_server}
      db_database: ${file(../apsecrets.yml):db_database}
      db_username: ${file(../apsecrets.yml):db_username}
      db_password: ${file(../apsecrets.yml):db_password}
    vpc:
      securityGroupIds:
        - ${file(../apsecrets.yml):secGroup}
      subnetIds:
        - ${file(../apsecrets.yml):subnet1}
        - ${file(../apsecrets.yml):subnet2}
        - ${file(../apsecrets.yml):subnet3}
    events:
      - http:
          path: /graphql
          method: get
          reqValidatorName: 'xRequestValidateQuery'
          request:
            parameters:
              querystrings:
                query: true
          documentation:
            summary: "GraphQL entry point (read only)"
            description: "This is how clients are to request data from the service. It is read only! Changes are made through other endpoints."

  GraphQLAuthGet:
    handler: abstractplay::abstractplay.DBFunctions::GraphQLAuth
    environment:
      db_server: ${file(../apsecrets.yml):db_server}
      db_database: ${file(../apsecrets.yml):db_database}
      db_username: ${file(../apsecrets.yml):db_username}
      db_password: ${file(../apsecrets.yml):db_password}
    vpc:
      securityGroupIds:
        - ${file(../apsecrets.yml):secGroup}
      subnetIds:
        - ${file(../apsecrets.yml):subnet1}
        - ${file(../apsecrets.yml):subnet2}
        - ${file(../apsecrets.yml):subnet3}
    events:
      - http:
          path: /graphqlauth
          method: get
          authorizer:
            arn: ${file(../apsecrets.yml):cognitoarn}
          reqValidatorName: 'xRequestValidateQuery'
          request:
            parameters:
              querystrings:
                query: true
          documentation:
            summary: "Authenticated GraphQL entry point (read only)"
            description: "This is how authenticated clients are to request data from the service. Mutation requests can only be made via POST."

  GraphQLAuthPost:
    handler: abstractplay::abstractplay.DBFunctions::GraphQLAuth
    environment:
      db_server: ${file(../apsecrets.yml):db_server}
      db_database: ${file(../apsecrets.yml):db_database}
      db_username: ${file(../apsecrets.yml):db_username}
      db_password: ${file(../apsecrets.yml):db_password}
    vpc:
      securityGroupIds:
        - ${file(../apsecrets.yml):secGroup}
      subnetIds:
        - ${file(../apsecrets.yml):subnet1}
        - ${file(../apsecrets.yml):subnet2}
        - ${file(../apsecrets.yml):subnet3}
    events:
      - http:
          path: /graphqlauth
          method: post
          authorizer:
            arn: ${file(../apsecrets.yml):cognitoarn}
          reqValidatorName: 'xRequestValidateBody'
          documentation:
            summary: "Authenticated GraphQL entry point (read/write)"
            description: "This is how authenticated clients are to request data from the service. Mutation requests can only be made via POST."
            requestModels:
              "application/json": "RequestGraphQLPost"

  MutatorSNS:
    handler: abstractplay::abstractplay.DBFunctions::Mutator
    environment:
      db_server: ${file(../apsecrets.yml):db_server}
      db_database: ${file(../apsecrets.yml):db_database}
      db_username: ${file(../apsecrets.yml):db_username}
      db_password: ${file(../apsecrets.yml):db_password}
    vpc:
      securityGroupIds:
        - ${file(../apsecrets.yml):secGroup}
      subnetIds:
        - ${file(../apsecrets.yml):subnet1}
        - ${file(../apsecrets.yml):subnet2}
        - ${file(../apsecrets.yml):subnet3}
    events:
      - sns: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.snsMutatorName}

  Pinger:
    handler: abstractplay::abstractplay.Functions::Pinger
    events:
      - sns: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.snsPingerName}

  GetGuid:
    handler: abstractplay::abstractplay.Functions::GetSequentialGuid
    events:
      - http:
          path: /debug/guid
          method: get
          authorizer:
            arn: ${file(../apsecrets.yml):cognitoarn}
          documentation:
            summary: "Generate a new sequential GUID"
            description: "Generate a new sequential GUID"

# you can add CloudFormation resource templates here
resources:
  Resources:
    xRequestValidateBody:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'reqvalidator-body'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    xRequestValidateQuery:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'reqvalidator-params'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: false
        ValidateRequestParameters: true
    MutatorTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "SNS queue that accepts mutate requests"
        TopicName: ${self:custom.snsMutatorName}
    PingerTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "SNS queue that accepts game/ai ping requests"
        TopicName: ${self:custom.snsPingerName}

custom:
  dotnet:
    slndir: sln/abstractplay
  snsMutatorName: sns-mutator
  # cloud formation intrinstic function to get ARN of topic.
  # `MutatorTopic` references the cloudformation in `resources`
  snsMutatorArn:
    Fn::Join:
      - ''
      - - 'arn:aws:sns:'
        - Ref: AWS::Region
        - ":"
        - Ref: AWS::AccountId
        - ":"
        - Fn::GetAtt:
          - MutatorTopic
          - TopicName
  snsPingerName: sns-pinger
  # cloud formation intrinstic function to get ARN of topic.
  # `MutatorTopic` references the cloudformation in `resources`
  snsPingerArn:
    Fn::Join:
      - ''
      - - 'arn:aws:sns:'
        - Ref: AWS::Region
        - ":"
        - Ref: AWS::AccountId
        - ":"
        - Fn::GetAtt:
          - PingerTopic
          - TopicName
  customDomain:
    domainName: api.abstractplay.com
    basepath: ''
    stage: ${self:provider.stage}
    createRoute53Record: false
    endpointType: "edge"
  documentation:
    info:
      version: "1"
      title: "Abstract Play API"
      description: "The primary Abstract Play API"
      termsOfService: "https://www.abstractplay.com/terms"
    models:
      -
        name: "RequestGraphQLPost"
        description: "Required body content when POSTing to GraphQL endpoints"
        contentType: "application/json"
        schema: ${file(models/request_graphql_post.json)}


